class Insight:
    def __init__(self):
        medianvals_by_zip = open(file_zip_output,"w+")
        medianvals_by_date = open(file_date_output,"w+")

        # perhaps use only one master_d in the future, use these ones to check
        master_d_zip = {}
        master_d_date = {}

        with open(file_input) as f:
            for line in f:
                mylist = line.split('|')  # this is always? of length 21
                if (len(mylist)==21):
                    d = {'CMTE_ID' : mylist[0], 'ZIP_CODE' : mylist[10][:5] # zip: first 5 digits only
                        ,'TRANSACTION_DT' : mylist[13], 'TRANSACTION_AMT' : mylist[14], 'OTHER_ID' : mylist[15]}

                    if (d['CMTE_ID']!='' and d['TRANSACTION_AMT']!='' and d['OTHER_ID']==''):
                        # process this one (applies to both files)



                        # zip - write as you read in
                        if (is_zip(d['ZIP_CODE'])==True):
                            master_d_zip.setdefault((d['CMTE_ID'],d['ZIP_CODE']), []).append(int(d['TRANSACTION_AMT']))
                            medianvals_by_zip.write(''+d['CMTE_ID']+'|'+d['ZIP_CODE']+'|'+ str(round(statistics.median(master_d_zip[(d['CMTE_ID'],d['ZIP_CODE'])])))+ '|'
                                                    +str(len(master_d_zip[(d['CMTE_ID'],d['ZIP_CODE'])]))+'|'
                                                    +str(sum(master_d_zip[(d['CMTE_ID'],d['ZIP_CODE'])]))+'\n')

                        # date - wait to write
                        if (is_date(d['TRANSACTION_DT'])==True):

                            master_d_date.setdefault((d['CMTE_ID'],d['TRANSACTION_DT']), []).append(int(d['TRANSACTION_AMT']))
        #             else:
        #                 print('bad,  ', 'ID: ', d['CMTE_ID'], ', AMT: ', d['TRANSACTION_AMT'], ', OTHER: ',d['OTHER_ID'])

        # write date files
        # sorted alphabetical by recipient and then chronologically by date.

        # print(sorted(master_d_date))

        for d in sorted(master_d_date):

            medianvals_by_date.write(''+d[0]+'|'+d[1]+'|'+str(round(statistics.median(master_d_date[d]))) + '|'
                                     + str(len(master_d_date[d]))+'|'
                                     + str(sum(master_d_date[d]))+'\n')



    # Checks if value is a date; False if:  empty, malformed
    def is_date(s):
        try:
            int(s)
            return (len(str(s))==8)
        except ValueError:
            pass

        return False

    # Checks if value is a zip code; False if: empty, fewer than five digits
    def is_zip(s):
        try:
            int(s)
            return (len(str(s))>=5)
        except ValueError:
            pass

        return False
